# Generated by Django 3.1.7 on 2021-03-03 22:41

import app.common.types
import app.profiles.types
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='uuid')),
                ('slug', models.SlugField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='slug')),
                ('status', models.CharField(choices=[('disabled', 'DISABLED'), ('active', 'ACTIVE'), ('verified', 'VERIFIED')], default=app.profiles.types.ProfileStatuses['ACTIVE'], max_length=255, verbose_name='status')),
                ('type', models.CharField(choices=[('individual', 'INDIVIDUAL'), ('organization', 'ORGANIZATION')], default=app.profiles.types.ProfileTypes['INDIVIDUAL'], max_length=255, verbose_name='type')),
                ('first_name', models.CharField(max_length=255, validators=[django.core.validators.ProhibitNullCharactersValidator(), django.core.validators.MinLengthValidator(2)], verbose_name='first name')),
                ('last_name', models.CharField(max_length=255, validators=[django.core.validators.ProhibitNullCharactersValidator(), django.core.validators.MinLengthValidator(2)], verbose_name='last name')),
                ('gender', models.CharField(choices=[('female', 'FEMALE'), ('male', 'MALE'), ('other', 'OTHER')], default=app.common.types.Genders['OTHER'], max_length=255, verbose_name='gender')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='birthdate')),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.ProhibitNullCharactersValidator(), django.core.validators.EmailValidator()], verbose_name='e-mail')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='phone')),
                ('profile_picture_uri', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()], verbose_name='profile picture uri')),
                ('bio', models.TextField(blank=True, default='', validators=[django.core.validators.ProhibitNullCharactersValidator()], verbose_name='bio')),
                ('timezone', models.CharField(default='Europe/Berlin', max_length=255, verbose_name='timezone')),
                ('notification_messages', models.BooleanField(default=True, verbose_name='notification messages')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='deleted at')),
                ('languages', models.ManyToManyField(related_name='profiles', to='common.Language', verbose_name='languages')),
                ('location_city', models.ForeignKey(blank=True, db_column='location_city_uuid', default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to='common.city', verbose_name='location city')),
                ('location_country', models.ForeignKey(blank=True, db_column='location_country_uuid', default=None, null=True, on_delete=django.db.models.deletion.RESTRICT, to='common.country', verbose_name='location country')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
        ),
        migrations.CreateModel(
            name='ProfileTag',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('slug', models.SlugField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='slug')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.ProhibitNullCharactersValidator()])),
            ],
            options={
                'verbose_name': 'profile tag',
                'verbose_name_plural': 'profile tags',
            },
        ),
        migrations.CreateModel(
            name='ProfileAchievement',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='uuid')),
                ('type', models.CharField(choices=[('class attend', 'CLASS_ATTEND'), ('open source contribution', 'OPEN_SOUCE_CONTRIBUTION'), ('published article', 'PUBLISHED_ARTICLE'), ('presentation', 'PRESENTATION')], default=app.profiles.types.ProfileAchievementTypes['CLASS_ATTEND'], max_length=255, verbose_name='type')),
                ('earned_at', models.DateTimeField(verbose_name='earned at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='deleted at')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='profiles.profile')),
            ],
            options={
                'verbose_name': 'profile achievement',
                'verbose_name_plural': 'profile achievements',
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='tags',
            field=models.ManyToManyField(related_name='tags', to='profiles.ProfileTag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='profile',
            name='users',
            field=models.ManyToManyField(related_name='profiles', to=settings.AUTH_USER_MODEL, verbose_name='users'),
        ),
    ]
